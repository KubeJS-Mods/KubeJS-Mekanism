import java.time.Instant

plugins {
	id 'base'
	id 'java'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.moddev' version "2.0.107"
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

ext.ENV = System.getenv()
def isLocal = !ENV.containsKey("GITHUB_RUN_NUMBER")

version = "${mod_version}-${isLocal ? "local.${Instant.now().epochSecond}" : "build.${ENV.GITHUB_RUN_NUMBER}"}"
group = project.maven_group
base.archivesBaseName = project.archives_base_name

neoForge {
	version = project.neoforge_version

	runs {
		configureEach {
			logLevel = org.slf4j.event.Level.INFO
		}

		client {
			ideName = 'Client'
			client()
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

			if (ENV.MC_CLIENT_ARGS) {
				programArguments.addAll(ENV.MC_CLIENT_ARGS.split(' '))
			}

			jvmArguments.addAll("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
			gameDirectory = file 'runs/client'
		}

		server {
			ideName = 'Server'
			server()
			programArgument("--nogui")
			gameDirectory = file 'runs/server'
		}
	}

	mods {
		kubejs_mekanism {
			sourceSet sourceSets.main
		}
	}
}

compileJava {
	options.encoding = "UTF-8"
	options.release.set(21)
	options.compilerArgs << '-parameters' << '-Xmaxerrs' << '1000'
}

java {
	sourceCompatibility = targetCompatibility = '21'
	withSourcesJar()
}

repositories {
	mavenLocal()
	mavenCentral()

	maven {
		url "https://maven.neoforged.net/releases"
	}

	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
		content {
			includeGroup "org.parchmentmc.data"
		}
	}

	maven {
		url "https://maven.latvian.dev/releases"
		content {
			includeGroup "dev.latvian.mods"
			includeGroup "dev.latvian.apps"
		}
	}

	maven {
		url 'https://jitpack.io'
		content {
			includeGroup "com.github.rtyley"
		}
	}

	maven {
		url "https://modmaven.dev/"
		content {
			includeGroup "mekanism"
		}
	}
}

dependencies {
	api("dev.latvian.mods:kubejs-neoforge:$kubejs_version")

	compileOnly "mekanism:Mekanism:$mekanism_version"
	// Add latest versions of Mekanism, Mekanism Generators, Mekanism Tools, and Mekanism Additions to mods/ folder
}

processResources {
	def toReplace = [
			"version"         : project.version,
			"kubejs_version"  : project.kubejs_version,
			"mekanism_version": project.mekanism_version,
	]

	println("[Process Resources] Replacing properties in resources: " + toReplace)

	inputs.properties toReplace
	filesMatching("META-INF/neoforge.mods.toml") {
		expand toReplace
	}
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

publishing {
	publications {
		mavenNeoForge(MavenPublication) {
			artifactId = archives_base_name
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_URL && ENV.MAVEN_USERNAME && ENV.MAVEN_TOKEN) {
			maven {
				url = ENV.MAVEN_URL
				credentials {
					username = ENV.MAVEN_USERNAME
					password = ENV.MAVEN_TOKEN
				}
			}
		}
	}
}

unifiedPublishing {
	project {
		releaseType = "${ENV.RELEASE_TYPE ?: 'release'}"
		gameVersions = Arrays.asList(rootProject.supported_versions.split(', '))
		gameLoaders = ["neoforge"]
		version = project.version
		displayName = "$mod_name NeoForge $project.version"
		changelog = "https://github.com/KubeJS-Mods/KubeJS-Mekanism/commits/main/"
		mainPublication jar

		relations {
			depends {
				curseforge = modrinth = "kubejs"
			}
			depends {
				curseforge = modrinth = "mekanism"
			}
		}

		if (ENV.CURSEFORGE_KEY) {
			curseforge {
				token = ENV.CURSEFORGE_KEY
				id = project.curseforge_id
			}
		}

		if (ENV.MODRINTH_TOKEN) {
			modrinth {
				token = ENV.MODRINTH_TOKEN
				id = project.modrinth_id
				version = "$project.version+$project.name"
			}
		}
	}
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true

		["client", "server"].each {
			[
					".architectury-transformer",
					"config",
					"crash-reports",
					"debug",
					"downloads",
					"dumps",
					"flashback",
					"local",
					"logs",
					"mods",
					"pack-sync",
					"profilekeys",
					"saves",
					"command_history.txt",
					"options.txt",
					"server.properties",
					"world",
					"emi.json",
					"usercache.json",
					"usernamecache.json"
			].each { ext ->
				excludeDirs.add(file("runs/$it/$ext"))
			}
		}
	}
}